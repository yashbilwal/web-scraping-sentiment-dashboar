{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yash\\\\Academics\\\\Projects\\\\Scraper\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport SentimentChart from \"./components/SentimentChart\";\nimport './custom.css'; // Import custom styles\nimport SentimentTable from \"./components/SentimentTable\";\nimport Navbar from \"./components/Navbar\";\nimport Loader from \"./components/Loader\";\nimport { Spinner } from 'react-bootstrap'; // Bootstrap spinner\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Ensure Bootstrap styles are included\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false); // New state to track processing status\n\n  // First trigger scrape & analyze\n  const scrapeAndAnalyze = async () => {\n    setIsProcessing(true); // Indicate that processing has started\n    setLoading(true); // Set loading to true while fetching data\n    try {\n      await axios.get(\"http://127.0.0.1:5000/api/scrape\"); // This triggers scraping + sentiment analysis\n    } catch (err) {\n      console.error(\"Error during scraping:\", err);\n    }\n  };\n\n  // Then fetch updated sentiment data\n  const fetchSentimentData = async () => {\n    try {\n      const res = await axios.get(\"http://127.0.0.1:5000/api/sentiments\");\n      setData(res.data);\n    } catch (error) {\n      console.error(\"Error fetching sentiment data\", error);\n    } finally {\n      setLoading(false); // Set loading to false after data fetch\n      setIsProcessing(false); // End of processing\n    }\n  };\n\n  // Handle button click to start the process\n  const handleStart = async () => {\n    setShowDashboard(true);\n    await scrapeAndAnalyze(); // Start scraping\n    await fetchSentimentData(); // Fetch sentiment data once scraping is done\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center mt-5\",\n    children: !showDashboard ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex flex-column justify-content-center align-items-center vh-100 bg-light\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mb-4\",\n        children: \"\\uD83D\\uDCCA Welcome to the Sentiment Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-lg\",\n        onClick: handleStart,\n        disabled: isProcessing // Disable the button while processing\n        ,\n        children: isProcessing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            size: \"sm\",\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), \"Please wait...\"]\n        }, void 0, true) : \"Start Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"my-4\",\n        children: \"Web Scraping & Sentiment Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(SentimentChart, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(SentimentTable, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Fn5WaNKFuC5ikI/QQAkSsYYQ1Ys=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","SentimentChart","SentimentTable","Navbar","Loader","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","loading","setLoading","showDashboard","setShowDashboard","isProcessing","setIsProcessing","scrapeAndAnalyze","get","err","console","error","fetchSentimentData","res","handleStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","animation","size","_c","$RefreshReg$"],"sources":["D:/Yash/Academics/Projects/Scraper/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport SentimentChart from \"./components/SentimentChart\";\nimport './custom.css'; // Import custom styles\nimport SentimentTable from \"./components/SentimentTable\";\nimport Navbar from \"./components/Navbar\";\nimport Loader from \"./components/Loader\";\nimport { Spinner } from 'react-bootstrap';  // Bootstrap spinner\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Ensure Bootstrap styles are included\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);  // New state to track processing status\n\n  // First trigger scrape & analyze\n  const scrapeAndAnalyze = async () => {\n    setIsProcessing(true);  // Indicate that processing has started\n    setLoading(true);       // Set loading to true while fetching data\n    try {\n      await axios.get(\"http://127.0.0.1:5000/api/scrape\");  // This triggers scraping + sentiment analysis\n    } catch (err) {\n      console.error(\"Error during scraping:\", err);\n    }\n  };\n\n  // Then fetch updated sentiment data\n  const fetchSentimentData = async () => {\n    try {\n      const res = await axios.get(\"http://127.0.0.1:5000/api/sentiments\");\n      setData(res.data);\n    } catch (error) {\n      console.error(\"Error fetching sentiment data\", error);\n    } finally {\n      setLoading(false);   // Set loading to false after data fetch\n      setIsProcessing(false);  // End of processing\n    }\n  };\n\n  // Handle button click to start the process\n  const handleStart = async () => {\n    setShowDashboard(true);\n    await scrapeAndAnalyze();  // Start scraping\n    await fetchSentimentData();  // Fetch sentiment data once scraping is done\n  };\n\n  return (\n    <div className=\"text-center mt-5\">\n      {!showDashboard ? (\n        <div className=\"d-flex flex-column justify-content-center align-items-center vh-100 bg-light\">\n          <h1 className=\"mb-4\">ðŸ“Š Welcome to the Sentiment Dashboard</h1>\n          <button\n            className=\"btn btn-primary btn-lg\"\n            onClick={handleStart}\n            disabled={isProcessing}  // Disable the button while processing\n          >\n            {isProcessing ? (\n              <>\n                <Spinner animation=\"border\" size=\"sm\" className=\"mr-2\" />\n                Please wait...\n              </>\n            ) : (\n              \"Start Dashboard\"\n            )}\n          </button>\n        </div>\n      ) : (\n        <>\n          <Navbar />\n          <h2 className=\"my-4\">Web Scraping & Sentiment Analysis</h2>\n          {loading ? (\n            <Loader />\n          ) : (\n            <div className=\"container\">\n              <SentimentChart data={data} />\n              <SentimentTable data={data} />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}